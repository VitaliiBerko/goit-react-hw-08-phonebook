{"version":3,"file":"static/js/62.4bcb53b7.chunk.js","mappings":"kQAKQA,EAAaC,EAAQ,MAArBD,SACR,EAAqCC,EAAQ,MAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAERC,EAAW,WACtB,IAAMC,EAAWH,IACXI,EAAYH,EAAYI,EAAAA,IAE9B,EAAwBP,EAAS,IAAjC,eAAOQ,EAAP,KAAaC,EAAb,KACA,EAA0BT,EAAS,IAAnC,eAAOU,EAAP,KAAcC,EAAd,KACA,EAAgCX,EAAS,IAAzC,eAAOY,EAAP,KAAiBC,EAAjB,KACMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,EAAe,SAAAC,GACnB,MAAwBA,EAAIC,cAApBC,EAAR,EAAQA,MACR,OADA,EAAeb,MAEb,IAAK,OACHC,EAAQY,GACR,MAEF,IAAK,QACHV,EAASU,GACT,MACF,IAAK,WACHR,EAAYQ,GACZ,MAEF,QACE,OAEL,EAkBD,OAAOf,GAAa,SAAC,IAAD,KAClB,kBAAMgB,SAjBe,SAAAH,GACrBA,EAAII,iBACJ,IACA,EADaJ,EAAIK,OACsBC,SAA/BjB,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAAOE,EAArB,EAAqBA,SACfc,EAAWlB,EAAKa,MAChBM,EAAYjB,EAAMW,MAClBO,EAAehB,EAASS,MAE9BhB,GACEwB,EAAAA,EAAAA,IAAS,CAAErB,KAAMkB,EAAUhB,MAAOiB,EAAWf,SAAUgB,KAEzDnB,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAGiCiB,UAAWC,EAAAA,EAAAA,KAA3C,WACE,kBAAOC,QAASlB,EAAhB,mBACA,kBACEgB,UAAWC,EAAAA,EAAAA,MACXE,GAAInB,EACJoB,KAAK,OACL1B,KAAK,OACL2B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRhB,MAAOb,EACP8B,SAAUpB,KAGZ,kBAAOc,QAAShB,EAAhB,oBACA,kBACEc,UAAWC,EAAAA,EAAAA,MACXE,GAAIjB,EACJkB,KAAK,QACL1B,KAAK,QAEL4B,MAAM,wFACNC,UAAQ,EACRhB,MAAOX,EACP4B,SAAUpB,KAEZ,kBAAOc,QAASf,EAAhB,uBACA,kBACEa,UAAWC,EAAAA,EAAAA,MACXE,GAAIhB,EACJiB,KAAK,WAEL1B,KAAK,WAEL4B,MAAM,2HACNG,YAAY,gDACZF,UAAQ,EACRhB,MAAOT,EACP0B,SAAUpB,KAGZ,mBAAQY,UAAU,kBAAkBI,KAAK,SAAzC,oBAKL,C,2CCrGO9B,EAAaH,EAAQ,MAArBG,SAMR,UAJgB,WACZ,OAAQ,SAACA,EAAD,GACX,C,qBCHD,KAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,cAAgB,mC,wDCA7F,IAkBIW,EAAS,eAACyB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACX,EAAIY,GAWvD,OAREZ,IAFFY,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/JoinForm/JoinForm.jsx","pages/JoinPage/JoinPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport s from '../ContactForm/contactForm.module.css';\nimport { joinUser } from 'redux/auth/auth.operation';\nimport { selectIsLoading } from 'redux/auth/auth.selector';\nimport Loader from 'components/Loader/loader';\nconst { useState } = require('react');\nconst { useDispatch, useSelector } = require('react-redux');\n\nexport const JoinForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const handleChange = evt => {\n    const { value, name } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleOnSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const { name, email, password } = form.elements;\n    const userName = name.value;\n    const userEmail = email.value;\n    const userPassword = password.value;\n\n    dispatch(\n      joinUser({ name: userName, email: userEmail, password: userPassword })\n    );\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return isLoading ? (<Loader/>) : (\n    <form onSubmit={handleOnSubmit} className={s.form}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        className={s.input}\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n\n      <label htmlFor={emailInputId}>Email</label>\n      <input\n        className={s.input}\n        id={emailInputId}\n        type=\"email\"\n        name=\"email\"\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Email must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={email}\n        onChange={handleChange}\n      />\n      <label htmlFor={passwordInputId}>Password</label>\n      <input\n        className={s.input}\n        id={passwordInputId}\n        type=\"password\"\n        //   type={isPass ? 'password' : 'text'}\n        name=\"password\"\n        // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Password must be digits and have more then 7 characters and can contain spaces, dashes, parentheses and can start with +\"\n        placeholder='Your password must be 7 characters or longer.'\n        required\n        value={password}\n        onChange={handleChange}\n      />\n     \n      <button className=\"btn btn-primary\" type=\"submit\">\n        Join\n      </button>\n    </form>\n  );\n};\n","const { JoinForm } = require(\"components/JoinForm/JoinForm\")\n\nconst JoinPage =()=> {   \n    return (<JoinForm/>)\n}\n\nexport default JoinPage;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"input\":\"contactForm_input__wCtae\",\"btnAddContact\":\"contactForm_btnAddContact__4J9OQ\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","require","useDispatch","useSelector","JoinForm","dispatch","isLoading","selectIsLoading","name","setName","email","setEmail","password","setPassword","nameInputId","nanoid","emailInputId","passwordInputId","handleChange","evt","currentTarget","value","onSubmit","preventDefault","target","elements","userName","userEmail","userPassword","joinUser","className","s","htmlFor","id","type","pattern","title","required","onChange","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}