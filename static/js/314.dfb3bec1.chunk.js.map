{"version":3,"file":"static/js/314.dfb3bec1.chunk.js","mappings":"sRAQaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,eACXC,GAAYC,EAAAA,EAAAA,aAAYC,EAAAA,IAE9B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,EAAe,SAAAC,GACnB,MAAwBA,EAAIC,cAApBC,EAAR,EAAQA,MACR,OADA,EAAeC,MAEb,IAAK,QACHV,EAASS,GACT,MACF,IAAK,WACHP,EAAYO,GACZ,MAEF,QACE,OAEL,EAcD,OAAOd,GAAa,SAAC,IAAD,KAClB,kBAAMgB,SAbe,SAAAJ,GACrBA,EAAIK,iBACJ,IACA,EADaL,EAAIM,OACgBC,SAAzBf,EAAR,EAAQA,MAAOE,EAAf,EAAeA,SACTc,EAAYhB,EAAMU,MAClBO,EAAef,EAASQ,MAE9BhB,GAASwB,EAAAA,EAAAA,IAAM,CAAElB,MAAOgB,EAAWd,SAAUe,KAC7ChB,EAAS,IACTE,EAAY,GACb,EAGiCgB,UAAWC,EAAAA,EAAAA,KAA3C,WACE,kBAAOC,QAASjB,EAAhB,oBACA,kBACEe,UAAWC,EAAAA,EAAAA,MACXE,GAAIlB,EACJmB,KAAK,QACLZ,KAAK,QAELa,UAAQ,EACRd,MAAOV,EACPyB,SAAUlB,KAEZ,kBAAOc,QAASf,EAAhB,uBACA,kBACEa,UAAWC,EAAAA,EAAAA,MACXE,GAAIhB,EAEJiB,KAAK,WACLZ,KAAK,WAELe,MAAM,2FACNF,UAAQ,EACRd,MAAOR,EACPuB,SAAUlB,KAGZ,mBAAQY,UAAU,kBAAkBI,KAAK,SAAzC,qBAKL,ECvED,EAJiB,WACb,OAAQ,SAAC9B,EAAD,GACX,C,qBCHD,KAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,cAAgB,mC,wDCA7F,IAkBIY,EAAS,eAACsB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login/LoginPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport s from '../ContactForm/contactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/auth/auth.operation';\nimport Loader from 'components/Loader/loader';\nimport { selectIsLoading } from 'redux/auth/auth.selector';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const handleChange = evt => {\n    const { value, name } = evt.currentTarget;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleOnSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const { email, password } = form.elements;\n    const userEmail = email.value;\n    const userPassword = password.value;\n\n    dispatch(logIn({ email: userEmail, password: userPassword }));\n    setEmail('');\n    setPassword('');\n  };\n\n  return isLoading ? (<Loader/>) :( \n    <form onSubmit={handleOnSubmit} className={s.form}>\n      <label htmlFor={emailInputId}>Email</label>\n      <input\n        className={s.input}\n        id={emailInputId}\n        type=\"email\"\n        name=\"email\"\n        \n        required\n        value={email}\n        onChange={handleChange}\n      />\n      <label htmlFor={passwordInputId}>Password</label>\n      <input\n        className={s.input}\n        id={passwordInputId}\n        //   type={isPass ? 'password' : 'text'}\n        type=\"password\"\n        name=\"password\"\n        \n        title=\"Password must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={password}\n        onChange={handleChange}\n      />\n\n      <button className='btn btn-primary' type=\"submit\">\n        LogIn\n      </button>\n    </form>\n  );\n};\n\n","import { LoginForm } from \"components/LoginForm/LoginForm\";\n\nconst LoginPage =()=> {\n    return (<LoginForm/>)\n}\n\nexport default LoginPage;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"input\":\"contactForm_input__wCtae\",\"btnAddContact\":\"contactForm_btnAddContact__4J9OQ\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","useState","email","setEmail","password","setPassword","emailInputId","nanoid","passwordInputId","handleChange","evt","currentTarget","value","name","onSubmit","preventDefault","target","elements","userEmail","userPassword","logIn","className","s","htmlFor","id","type","required","onChange","title","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}