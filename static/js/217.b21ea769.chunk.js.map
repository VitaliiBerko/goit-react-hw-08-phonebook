{"version":3,"file":"static/js/217.b21ea769.chunk.js","mappings":"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","sources":["redux/contacts/contacts.selector.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/contactListItem.module.css?d502","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/contactsList.module.css?4445","components/ContactList/ContactList.jsx","../node_modules/clsx/dist/clsx.m.js","pages/ContactsPage/ContactsPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const selectContacts= state=>state.contacts.items;\nexport const selectIsloading = state=> state.contacts.isLoading;\nexport const selectError = state=> state.contacts.error;\nexport const selectFilter =state => state.filter;","import { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport s from './contactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts.selector';\nimport { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = evt => {\n    const { value, name } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, number } = form.elements;\n    const contactName = name.value;\n    const contactNumber = number.value;\n\n    Notiflix.Notify.init({\n      position: 'center-top',\n    });\n\n    if (contacts.find(contact => contact.name === contactName)) {\n      Notiflix.Notify.info(`${contactName} is already in contacts`);\n      setName('');\n      return;\n    } else {\n      setName('');\n      setNumber('');\n      dispatch(addContact({ name: contactName, number: contactNumber }));\n    }\n  };\n\n  return (\n    <form onSubmit={handleOnSubmit} className={s.form}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        className={s.input}\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        className={s.input}\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n\n      <button className={s.btnAddContact} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n// ContactForm.propTypes = {\n//   addContact: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export class ContactForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = nanoid();\n//   numberInputId = nanoid();\n\n//   handleChange = e => {\n//     const { value, name } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleOnSubmit = e => {\n//     e.preventDefault();\n\n//     const { addContact } = this.props;\n//     const { name } = this.state;\n\n//     Notiflix.Notify.init({\n//       position: 'center-top',\n//     });\n\n//     if (addContact.find(contact => contact.name === name)) {\n//       Notiflix.Notify.info(`${name} is already in contacts`);\n//       this.setState({ name: '' });\n//       return;\n//     }\n\n//     this.props.onSubmit(this.state);\n//     this.resetForm();\n\n//   };\n\n//   resetForm = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleOnSubmit} className={s.form}>\n//         <label htmlFor={this.nameInputId}>Name</label>\n//         <input\n//           className={s.input}\n//           id={this.nameInputId}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           value={name}\n//           onChange={this.handleChange}\n//         />\n\n//         <label htmlFor={this.numberInputId}>Number</label>\n//         <input\n//           className={s.input}\n//           id={this.numberInputId}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           value={number}\n//           onChange={this.handleChange}\n//         />\n\n//         <button className={s.btnAddContact} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"filter_filter__HJEMj\",\"title\":\"filter_title__k4Z+2\",\"input\":\"filter_input__sX944\"};","// import PropTypes from 'prop-types';\nimport s from './filter.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/contacts.selector';\nimport { searchFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n  const handlerFilter = e => {\n    dispatch(searchFilter(e.target.value.trim().toLowerCase()));\n  };\n  return (\n    <div className={s.filter}>\n      <label htmlFor={filterInputId} className={s.title}>\n        Find contacts by name\n      </label>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={handlerFilter}\n        id={filterInputId}\n        value={filter}\n      />\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"btnDelete\":\"contactListItem_btnDelete__7v+BV\"};","import PropTypes from 'prop-types';\nimport s from './contactListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <li >\n      {name} : {number}\n      <button\n        className={s.btnDelete}\n        type=\"button\"\n        onClick={() => {\n          handleDeleteContact(id);\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contactsList_list__p8doL\"};","import { useSelector } from 'react-redux';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { selectContacts, selectFilter } from 'redux/contacts/contacts.selector';\nimport styles from './contactsList.module.css'\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const findedContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <ul className={styles.list}>\n      {findedContacts &&\n        findedContacts.map(({ id, name, number }) => (\n          <ContactListItem key={id} id={id} name={name} number={number} />\n        ))}\n    </ul>\n  );\n};\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n//   onClick: PropTypes.func.isRequired,\n// };\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import { useEffect } from 'react';\nimport styles from '../../components/common.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsloading,\n} from 'redux/contacts/contacts.selector';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport clsx from 'clsx';\nimport Loader from 'components/Loader/loader';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsloading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return isLoading ? <Loader/> :  (\n    <>    \n      <div className={clsx(styles.container)}>\n        <h1 className={clsx(styles.textCentr)}>Phonebook</h1>\n        {isLoading && !error && <Loader />}\n         <ContactForm />\n      </div>\n\n      <div className={clsx(styles.container)}>\n        <h2 className={clsx(styles.textCentr)}>Contacts</h2>\n        <Filter />\n        {!!contacts && <ContactList />}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"input\":\"contactForm_input__wCtae\",\"btnAddContact\":\"contactForm_btnAddContact__4J9OQ\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["selectContacts","state","contacts","items","selectIsloading","isLoading","selectError","error","selectFilter","filter","ContactForm","useSelector","dispatch","useDispatch","useState","name","setName","number","setNumber","nameInputId","nanoid","numberInputId","handleChange","evt","currentTarget","value","onSubmit","e","preventDefault","target","elements","contactName","contactNumber","Notiflix","position","find","contact","addContact","className","s","htmlFor","id","type","pattern","title","required","onChange","Filter","filterInputId","searchFilter","trim","toLowerCase","ContactListItem","onClick","deleteContact","handleDeleteContact","ContactList","findedContacts","includes","styles","map","r","t","f","n","Array","isArray","length","arguments","useEffect","fetchContacts","clsx","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}